name: "ci"
on:
  pull_request: {}
  push:
    branches:
      - staging
      - trying
      - master
env:
  CI: 1
  RUST_BACKTRACE: full
  CARGO_INCREMENTAL: 0
  CARGO_BUILD_PIPELINING: "false"
jobs:
  style:
    name: style
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - name: check rust code formatting
        run: cargo jjs-check --no-default --rustfmt
      - name: run shellcheck
        run: cargo jjs-check --no-default --shellcheck
  clippy:
    name: clippy
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - name: run clippy
        run: cargo jjs-check --no-default --clippy
  cpp:
    name: cpp
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
        env:
          SECRET_ENABLED: ${{ secrets.SECRET_ENABLED }}
          PVS_NAME: ${{ secrets.PVS_NAME }}
          PVS_LICENSE_KEY: ${{ secrets.PVS_LICENSE_KEY }}
      - name: compile testlib
        run: cargo jjs-check --no-default --testlib
      - name: compile minion-ffi tests
        run: cargo jjs-check --no-default --minion-ffi
      - name: Run PVS
        run: cargo jjs-check --no-default --pvs
        env:
          SECRET_ENABLED: ${{ secrets.SECRET_ENABLED }}
  unit-tests:
    name: unit-tests
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: bash scripts/ci-env.sh
      - name: cargo jjs-test
        run: cargo jjs-test
  udeps:
    name: udeps
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: |
          bash scripts/ci-env.sh
          # TODO cache it too
          cargo install cargo-udeps
      - name: Get Rust version
        id: rustc_version
        run: |
          rust_version=$(rustc --version | md5sum | cut -f 1-1 -d ' ')
          echo "##[set-output name=version;]$(echo $rust_version)"
      - name: Cache cargo registry
        uses: actions/cache@v1.1.0
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1.1.0
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('Cargo.lock') }}
      - name: Cache build dir
        uses: actions/cache@v1.1.0
        with:
          path: target
          key: ${{ runner.os }}-udeps-${{ steps.rustc_version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - name: cargo-udeps
        run: cargo jjs-check --no-default --udeps
  e2e:
    name: e2e
    runs-on: "ubuntu-18.04"
    steps:
      - uses: actions/checkout@v1
      - run: |
          bash scripts/ci-env.sh
          sudo apt install -y --no-install-recommends postgresql-client-10 postgresql-10 libunwind-dev
          sudo -u postgres createuser runner --superuser
          cargo install lxtrace
      - name: Get Rust version
        id: rustc_version
        run: |
          rust_version=$(rustc --version | md5sum | cut -f 1-1 -d ' ')
          echo "##[set-output name=version;]$(echo $rust_version)"
      - name: Cache cargo registry
        uses: actions/cache@v1.1.0
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1.1.0
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('Cargo.lock') }}
      - name: Cache build dir
        uses: actions/cache@v1.1.0
        with:
          path: target
          key: ${{ runner.os }}-e2e-${{ steps.rustc_version.outputs.version }}-${{ hashFiles('Cargo.lock') }}
      - name: build
        run: cargo jjs-build
        env:
          JOB: e2e
      - name: launch jjs
        run: |
          # TODO: finer grained --force. Maybe --force-depends?
          sudo dpkg --force-all -i /opt/jjs/pkg/jjs.deb
          sudo jjs-oneclick
      - name: wait for launch
        run: cargo run --package util
        env:
          JJS_WAIT: tcp://localhost:1779
          RUST_LOG: util::wait=debug
      - name: run tests
        run: cargo jjs-test --integration-tests --skip-unit --nocapture
      - name: collect logs
        if: always()
        run: |
          mkdir logs
          sudo journalctl -u jjs-frontend.service -p debug > logs/frontend.txt
          sudo journalctl -u jjs-backend.service -p debug > logs/invoker.txt
          sudo cat /var/log/postgresql/postgresql-10-main.log > logs/postgres.txt
          cat logs/*
      - name: upload logs
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: logs
          path: ./logs
